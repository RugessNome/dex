
import model;

String read_all(const String & filename)
{
  File f{filename};
  if(!f.open(File::ReadOnly))
    return "";
  String ret = f.readAll();
  f.close();
  return ret;
}

void write_file(const String & filename, const String & content)
{
  File f{filename};
  if(!f.open(File::WriteOnly))
  {
    print("Could not write output file:" + filename);
	return;
  }
  f.write(content);
  f.close();
}

class Markdown : Output
{
  bool m_simplify_spaces;

  Markdown() : m_simplify_spaces(false) { }
  ~Markdown() = default;

  void write(const String& outdir)
  {
    liquid::Template tmplt = liquid::parse(read_all(profileDirectory() + "/output/template-class.md"));

	MarkdownLiquid renderer;

    json::Object context;
	context["classes"] = serialization::encode(state.classes);

    for(int i(0); i < state.classes.size(); ++i)
    {
	  context["class"] = context["classes"].at(i);
	  Class& cla = state.classes.at(i);

      write_file(outdir + "/" + cla.name + ".md", renderer.render(tmplt, context));
    }
  }

  String toString(const Space& sp)
  {
    if(m_simplify_spaces) return " ";
    return sp.content;
  }

  String toString(const EOL& )
  {
    return "\n";
  }

  String toString(const TextBold& text)
  {
    return "**" + stringify(text.content) + "**";
  }

  String toString(const TextItalic& text)
  {
    return "*" + stringify(text.content) + "*";
  }

  String toString(const ListNode& list)
  {
    String result = "";
    for (int i(0); i < list.items.length(); ++i)
    {
      result += "- ";
      result += stringify(list.items.at(i));
      result += "\n";
    }
    return result;
  }

  String toString(const InlineCode& inlcode)
  {
    return "`" + stringify(inlcode.content) + "`";
  }
  
  String toString(const Type& t)
  {
    return "`" + stringify(t.content) + "`";
  }

  String toString(const Link& link)
  {
    return "[" + stringify(link.text) + "](" + stringify(link.url) + ")";
  }

  String toString(const CodeBlock & cb)
  {
    String result = "";
    result += "```";
    result += cb.lang;
    m_simplify_spaces = false;
    result += stringify(cb.nodes);
    m_simplify_spaces = true;
    result += "```";
    return result;
  }

};

class MarkdownLiquid : liquid::Renderer
{
public:

  MarkdownLiquid() = default;
  ~MarkdownLiquid() = default;
  
  static TextBold bold(const String& str)
  {
    return TextBold(str);
  }

  static TextItalic italic(const String& str)
  {
    return TextItalic(str);
  }
};