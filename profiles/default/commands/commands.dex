
import node;
import nodes;

void fun(const Ref<Node> & name, Span::Line)
{
  if(state.stack.isEmpty())
  {
    print("fun not allowed in this context : empty stack");
  }

  if(state.stack.back().is<Class>())
  {
    auto func = Ref<Function>::make(name);
	Class & c = state.stack.back().as<Class>();
	c.functions.push_back(func);
	state.stack.push_back(func);
  }
  else
  {
    print("fun not allowed in this context : not a class");
  }
}


void param(const Ref<Node> & description, Span::Line)
{
  if(state.stack.isEmpty() || !state.stack.back().is<Function>())
  {
    print("param not allowed in this context");
  }
  
  Function & func = state.currentFunction();
  func.params.push_back(description);
}


void returns(const Ref<Node> & description, Span::Line)
{
  if(state.stack.isEmpty() || !state.stack.back().is<Function>())
  {
    print("returns not allowed in this context");
  }
  
  Function & func = state.currentFunction();
  func.returns = description;
}


Ref<Node> t(const Ref<Node> & t, Span::Word)
{
  return Ref<Type>::make(t);
}

Ref<Node> l(const Ref<Node> & url, const Ref<Node> & text)
{
  return Ref<Link>::make(url, text);
}

Ref<Node> c(const Ref<Node> & code, Span::Word)
{
  return Ref<InlineCode>::make(code);
}


namespace code
{
	
void begin(BracketArguments args)
{
  auto codeblock = Ref<CodeBlock>::make();
  
  for(auto it = args.begin(); it != args.end(); ++it)
  {
    if(it.key().isEmpty() || it.key() == "lang")
	{
	  codeblock.get().lang = it.value().toString();
	}
  }
  
  state.enter(codeblock);
}

void end()
{
  auto codeblock = state.leave();
  state.dispatch(codeblock);
}
	
}
