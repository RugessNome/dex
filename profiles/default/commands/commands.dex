
import model;

void fun(const json::Json & name, Span::Line)
{
  print("Start fun --");

  if(state.stack.isEmpty())
  {
    print("fun not allowed in this context : empty stack");
  }

  if(state.stack.back().is<Class>())
  {
    auto func = Ref<Function>::make(name);
	  Class & c = state.stack.back().as<Class>();
	  c.functions.push_back(func);
	  state.stack.push_back(func);
  }
  else
  {
    print("fun not allowed in this context : not a class");
  }
}


void param(const json::Json & description, Span::Line)
{
  if(state.stack.isEmpty() || !state.stack.back().is<Function>())
  {
    print("param not allowed in this context");
  }
  
  Function & func = state.currentFunction();
  func.params.push(description);
}


void returns(const json::Json & description, Span::Line)
{
  if(state.stack.isEmpty() || !state.stack.back().is<Function>())
  {
    print("returns not allowed in this context");
  }
  
  Function & func = state.currentFunction();
  func.returns = description;
}


Type t(const json::Json & t, Span::Word)
{
  return Type(t);
}

Link l(const json::Json & url, const json::Json & text)
{
  return Link(url, text);
}

InlineCode c(const json::Json & code, Span::Word)
{
  return InlineCode(code);
}

namespace code
{
	
void begin(Options opts)
{
  auto codeblock = Ref<CodeBlock>::make();
  
  for(auto it = opts.begin(); it != opts.end(); it++)
  {
    if(it.key().isEmpty() || it.key() == "lang")
	{
	  codeblock.get().lang = it.value().toString();
	}
  }
  
  state.enter(codeblock);
}

void end()
{
  auto codeblock = state.leave();
  state.dispatch(serialization::encode(codeblock.get()));
}
	
}
