
class Node
{
public:
  Node() = default;
  virtual ~Node() = default;
};

class WordNode : Node
{
public:
  WordNode(const String & value)
    : word(value) { }

  ~WordNode() = default;

  const String & value() const
  {
    return word;
  }

  String word;
};

class Glue : Node
{
public:
  Glue() = default;
  ~Glue() = default;
};

class GroupNode : Node
{
public:
  GroupNode() { }

  GroupNode(const List<Ref<Node>> & n)
    : nodes(n) { }
 
  ~GroupNode() = default;

  int size() const { return nodes.size(); }

  const Ref<Node> & at(int n) const { return nodes.at(n); }

  void push_back(const Ref<Node> & n)
  {
    nodes.push_back(n);
  }

  List<Ref<Node>> nodes;
};

class SingleArgumentNode : Node
{
public:
  SingleArgumentNode(const Ref<Node> & n)
   : argument(n) { }
  ~SingleArgumentNode() = default;

  Ref<Node> argument;
};