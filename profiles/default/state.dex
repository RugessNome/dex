
import model.node;
import model.class;
import model.function;
import model.code;

class State
{
public:
  State() = default;
  ~State() = default;

  List<Ref<Class>> classes;
  
  List<Ref<Node>> stack;
  
  Ref<Node> current() const
  {
    return stack.back();
  }
  
  Function & currentFunction()
  {
    return stack.back().as<Function>();
  }

  void enter(const Ref<Node> & n)
  {
    print("State::enter() called");
	  stack.push_back(n);
  }
  
  Ref<Node> leave()
  {
	  Ref<Node> ret = stack.back();
	  stack.pop_back();
	  return ret;
  }

  void dispatch(const json::Json& node)
  {
	  if(stack.isEmpty())
	  {
	    if(serialization::canDecode<Space>(node) || serialization::canDecode<EOL>(node))
	      return;
	  
	    print("Error while dispatching node, entity stack is empty");
	    return;
	  }
    
    if(stack.back().is<Class>())
    {
      Class & c = stack.back().as<Class>();
	    c.description.push(node);
    }
	  else if(stack.back().is<Function>())
    {
      Function & fun = stack.back().as<Function>();
	    fun.description.push(node);
    }
	  else if(stack.back().is<CodeBlock>())
	  {
	    CodeBlock & cb = stack.back().as<CodeBlock>();
	    cb.nodes.push(node);
	  }
  }

protected:

  void init()
  {
    parser_.setBlockDelimiters("/*!", "*/");
    parser_.addIgnoredSequence("* ");
    parser_.addIgnoredSequence("*");
    parser_.addIgnoredSequence(" * ");
    parser_.addIgnoredSequence(" *");
  }

  void beginFile(const String & path)
  {
    print("Processing file :" + path);
  }

  void endFile()
  {
    stack.clear();
  }
  
  void beginBlock()
  {
	  
  }
  
  void endBlock()
  {
    while(!stack.empty() && (stack.back().is<Function>()))
	{
      stack.pop_back();
	}
  }
};